name: YieldHarvest CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # Backend Testing and Quality Checks
  backend-test:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yieldharvest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Setup test environment
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yieldharvest_test
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-only
          HEDERA_NETWORK: testnet
          HEDERA_OPERATOR_ID: 0.0.123456
          HEDERA_OPERATOR_KEY: 302e020100300506032b65700422042000000000000000000000000000000000000000000000000000000000000000000000
          HEDERA_MIRROR_NODE_URL: https://testnet.mirrornode.hedera.com
        run: |
          npx prisma generate
          npx prisma db push
      
      - name: Run linting
        working-directory: ./backend
        run: npm run lint
      
      - name: Run type checking
        working-directory: ./backend
        run: npm run type-check
      
      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yieldharvest_test
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-only
          HEDERA_NETWORK: testnet
          HEDERA_OPERATOR_ID: 0.0.123456
          HEDERA_OPERATOR_KEY: 302e020100300506032b65700422042000000000000000000000000000000000000000000000000000000000000000000000
          HEDERA_MIRROR_NODE_URL: https://testnet.mirrornode.hedera.com
        run: npm run test:coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
      
      - name: Run security audit
        working-directory: ./backend
        run: npm audit --audit-level=high

  # Frontend Testing and Quality Checks
  frontend-test:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check
      
      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
      
      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: https://api.yieldharvest.com
          VITE_HEDERA_NETWORK: testnet
          VITE_HASHPACK_APP_ID: yieldharvest
        run: npm run build
      
      - name: Run security audit
        working-directory: ./frontend
        run: npm audit --audit-level=high

  # End-to-End Testing
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yieldharvest_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
      
      - name: Setup E2E environment
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yieldharvest_e2e
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-e2e-testing
          HEDERA_NETWORK: testnet
          HEDERA_OPERATOR_ID: 0.0.123456
          HEDERA_OPERATOR_KEY: 302e020100300506032b65700422042000000000000000000000000000000000000000000000000000000000000000000000
          HEDERA_MIRROR_NODE_URL: https://testnet.mirrornode.hedera.com
        run: |
          npx prisma generate
          npx prisma db push
          npm run seed:test
      
      - name: Start backend server
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yieldharvest_e2e
          NODE_ENV: test
          PORT: 3001
          JWT_SECRET: test-jwt-secret-for-e2e-testing
          HEDERA_NETWORK: testnet
          HEDERA_OPERATOR_ID: 0.0.123456
          HEDERA_OPERATOR_KEY: 302e020100300506032b65700422042000000000000000000000000000000000000000000000000000000000000000000000
          HEDERA_MIRROR_NODE_URL: https://testnet.mirrornode.hedera.com
        run: |
          npm run start &
          sleep 10
      
      - name: Build and start frontend
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: http://localhost:3001
          VITE_HEDERA_NETWORK: testnet
          VITE_HASHPACK_APP_ID: yieldharvest-e2e
        run: |
          npm run build
          npm run preview &
          sleep 5
      
      - name: Install Playwright
        working-directory: ./backend
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        working-directory: ./backend
        env:
          BASE_URL: http://localhost:4173
          API_URL: http://localhost:3001
        run: npm run test:e2e
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: backend/test-results/
          retention-days: 7

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: 'javascript'

  # Build and Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.yieldharvest.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Build backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build
      
      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: https://api-staging.yieldharvest.com
          VITE_HEDERA_NETWORK: testnet
          VITE_HASHPACK_APP_ID: yieldharvest-staging
        run: |
          npm ci
          npm run build
      
      - name: Deploy to Vercel (Frontend)
        id: vercel-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod --env NODE_ENV=staging'
      
      - name: Save Vercel deployment URL
        run: |
          echo "VERCEL_URL=${{ steps.vercel-deploy.outputs.preview-url }}" >> $GITHUB_ENV
      
      - name: Deploy to Render (Backend)
        id: render-deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
        run: |
          DEPLOY_RESPONSE=$(curl -s -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}')
          
          DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.id')
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
          
          # Wait for deployment to complete
          for i in {1..30}; do
            STATUS=$(curl -s "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$DEPLOY_ID" \
              -H "Authorization: Bearer $RENDER_API_KEY" | jq -r '.status')
            
            if [ "$STATUS" = "live" ]; then
              echo "Deployment successful!"
              break
            elif [ "$STATUS" = "build_failed" ] || [ "$STATUS" = "update_failed" ]; then
              echo "Deployment failed with status: $STATUS"
              exit 1
            fi
            
            echo "Deployment status: $STATUS, waiting..."
            sleep 30
          done
      
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        working-directory: ./backend
        run: |
          npm ci
          npx prisma migrate deploy
      
      - name: Comprehensive health check staging
        run: |
          echo "Waiting for services to be ready..."
          sleep 60
          
          # Check backend health with retries
          for i in {1..10}; do
            if curl -f -s https://api-staging.yieldharvest.com/health/simple; then
              echo "Backend health check passed"
              break
            fi
            echo "Backend health check failed, attempt $i/10"
            sleep 30
          done
          
          # Detailed health check
          HEALTH_RESPONSE=$(curl -s https://api-staging.yieldharvest.com/health)
          echo "Health check response: $HEALTH_RESPONSE"
          
          # Check if all critical services are healthy
          if echo $HEALTH_RESPONSE | jq -e '.services.database.status == "healthy" and .services.hedera.status == "healthy"' > /dev/null; then
            echo "All critical services are healthy"
          else
            echo "Critical services are not healthy"
            exit 1
          fi
          
          # Check frontend
          curl -f https://staging.yieldharvest.com || exit 1
          echo "Frontend health check passed"
      
      - name: Run smoke tests on staging
        working-directory: ./backend
        env:
          BASE_URL: https://api-staging.yieldharvest.com
          NODE_ENV: staging
        run: |
          npm run test:smoke || echo "Smoke tests failed but continuing..."

  # Build and Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://yieldharvest.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Build backend
        working-directory: ./backend
        run: |
          npm ci --only=production
          npm run build
      
      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: https://api.yieldharvest.com
          VITE_HEDERA_NETWORK: mainnet
          VITE_HASHPACK_APP_ID: yieldharvest
        run: |
          npm ci --only=production
          npm run build
      
      - name: Deploy to Vercel (Frontend)
        id: vercel-prod-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROD_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod --env NODE_ENV=production'
      
      - name: Save production deployment URLs
        run: |
          echo "VERCEL_PROD_URL=${{ steps.vercel-prod-deploy.outputs.preview-url }}" >> $GITHUB_ENV
      
      - name: Deploy to Render (Backend)
        id: render-prod-deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_PROD_SERVICE_ID }}
        run: |
          # Get current deployment for potential rollback
          CURRENT_DEPLOY=$(curl -s "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys?limit=1" \
            -H "Authorization: Bearer $RENDER_API_KEY" | jq -r '.deploys[0].id')
          echo "PREVIOUS_DEPLOY_ID=$CURRENT_DEPLOY" >> $GITHUB_ENV
          
          # Start new deployment
          DEPLOY_RESPONSE=$(curl -s -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}')
          
          DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.id')
          echo "PROD_DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
          
          # Wait for deployment to complete with timeout
          for i in {1..40}; do
            STATUS=$(curl -s "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$DEPLOY_ID" \
              -H "Authorization: Bearer $RENDER_API_KEY" | jq -r '.status')
            
            if [ "$STATUS" = "live" ]; then
              echo "Production deployment successful!"
              break
            elif [ "$STATUS" = "build_failed" ] || [ "$STATUS" = "update_failed" ]; then
              echo "Production deployment failed with status: $STATUS"
              exit 1
            fi
            
            echo "Production deployment status: $STATUS, waiting..."
            sleep 45
          done
      
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        working-directory: ./backend
        run: |
          npm ci --only=production
          npx prisma migrate deploy
      
      - name: Comprehensive production health check
        id: prod-health-check
        run: |
          echo "Waiting for production services to be ready..."
          sleep 90
          
          # Extended health check with retries
          HEALTH_CHECK_PASSED=false
          for i in {1..15}; do
            if curl -f -s https://api.yieldharvest.com/health/simple; then
              echo "Production backend health check passed"
              HEALTH_CHECK_PASSED=true
              break
            fi
            echo "Production backend health check failed, attempt $i/15"
            sleep 30
          done
          
          if [ "$HEALTH_CHECK_PASSED" = "false" ]; then
            echo "Production health check failed after all retries"
            exit 1
          fi
          
          # Detailed health check
          HEALTH_RESPONSE=$(curl -s https://api.yieldharvest.com/health)
          echo "Production health check response: $HEALTH_RESPONSE"
          
          # Verify all critical services
          if echo $HEALTH_RESPONSE | jq -e '.services.database.status == "healthy" and .services.hedera.status == "healthy"' > /dev/null; then
            echo "All critical production services are healthy"
          else
            echo "Critical production services are not healthy"
            echo "Health response: $HEALTH_RESPONSE"
            exit 1
          fi
          
          # Check frontend
          curl -f https://yieldharvest.com || exit 1
          echo "Production frontend health check passed"
      
      - name: Run production smoke tests
        working-directory: ./backend
        env:
          BASE_URL: https://api.yieldharvest.com
          NODE_ENV: production
        run: |
          npm run test:smoke || {
            echo "Production smoke tests failed!"
            exit 1
          }
      
      - name: Rollback on failure
        if: failure() && env.PREVIOUS_DEPLOY_ID != ''
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_PROD_SERVICE_ID }}
        run: |
          echo "Rolling back to previous deployment: $PREVIOUS_DEPLOY_ID"
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"imageUrl\": \"$PREVIOUS_DEPLOY_ID\"}"
      
      - name: Notify deployment success
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚀 YieldHarvest production deployment successful! Version: ${{ github.sha }}"}' \
            $SLACK_WEBHOOK

  # Performance Testing (Production)
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run performance tests
        working-directory: ./backend
        env:
          BASE_URL: https://api.yieldharvest.com
        run: |
          k6 run tests/performance/load-test.js
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: backend/performance-results/
          retention-days: 30

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.created_at < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }