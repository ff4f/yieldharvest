server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # YieldHarvest Backend Logs
  - job_name: yieldharvest-backend
    static_configs:
      - targets:
          - localhost
        labels:
          job: yieldharvest-backend
          service: backend
          environment: production
          __path__: /var/log/backend/*.log
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            service: service
            trace_id: trace_id
            user_id: user_id
            request_id: request_id
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      - labels:
          level:
          service:
          trace_id:
          user_id:
      - output:
          source: message

  # Nginx Access Logs
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-access
          service: frontend
          log_type: access
          environment: production
          __path__: /var/log/nginx/access.log
    pipeline_stages:
      - regex:
          expression: '^(?P<remote_addr>[\w\.]+) - (?P<remote_user>\S+) \[(?P<time_local>[^\]]+)\] "(?P<method>\S+) (?P<path>\S+) (?P<protocol>\S+)" (?P<status>\d+) (?P<body_bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)" "(?P<http_x_forwarded_for>[^"]*)" rt=(?P<request_time>[\d\.]+) uct="(?P<upstream_connect_time>[^"]*)" uht="(?P<upstream_header_time>[^"]*)" urt="(?P<upstream_response_time>[^"]*)"$'
      - timestamp:
          source: time_local
          format: 02/Jan/2006:15:04:05 -0700
      - labels:
          method:
          status:
          remote_addr:
      - metrics:
          nginx_requests_total:
            type: Counter
            description: "Total number of nginx requests"
            config:
              action: inc
          nginx_request_duration_seconds:
            type: Histogram
            description: "Nginx request duration in seconds"
            config:
              value: request_time
              buckets: [0.1, 0.5, 1.0, 2.0, 5.0, 10.0]

  # Nginx Error Logs
  - job_name: nginx-error
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-error
          service: frontend
          log_type: error
          environment: production
          __path__: /var/log/nginx/error.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<pid>\d+)#(?P<tid>\d+): (?P<message>.*)$'
      - timestamp:
          source: timestamp
          format: 2006/01/02 15:04:05
      - labels:
          level:
          pid:

  # Docker Container Logs
  - job_name: docker-containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["logging=promtail"]
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*?)'
        target_label: 'container_name'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'logstream'
      - source_labels: ['__meta_docker_container_label_logging_jobname']
        target_label: 'job'
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      - json:
          expressions:
            tag: attrs.tag
          source: attrs
      - regex:
          expression: (?P<container_name>(?:[^|]*))
          source: tag
      - timestamp:
          source: time
          format: RFC3339Nano
      - labels:
          stream:
          container_name:
      - output:
          source: output

  # System Logs (if available)
  - job_name: syslog
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          service: system
          environment: production
          __path__: /var/log/syslog
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}) (?P<hostname>\S+) (?P<service>\S+)(?:\[(?P<pid>\d+)\])?: (?P<message>.*)$'
      - timestamp:
          source: timestamp
          format: Jan 02 15:04:05
      - labels:
          hostname:
          service:
          pid:

  # Application-specific logs with structured format
  - job_name: yieldharvest-structured
    static_configs:
      - targets:
          - localhost
        labels:
          job: yieldharvest-structured
          service: application
          environment: production
          __path__: /var/log/backend/app.json
    pipeline_stages:
      - json:
          expressions:
            timestamp: '@timestamp'
            level: level
            message: message
            service: service
            module: module
            trace_id: trace_id
            span_id: span_id
            user_id: user_id
            request_id: request_id
            duration: duration
            status_code: status_code
            method: method
            path: path
            error: error
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      - labels:
          level:
          service:
          module:
          trace_id:
          user_id:
          method:
          status_code:
      - metrics:
          log_entries_total:
            type: Counter
            description: "Total number of log entries"
            config:
              action: inc
          error_entries_total:
            type: Counter
            description: "Total number of error log entries"
            config:
              action: inc
            match_stage:
              - json:
                  expressions:
                    level: level
              - match:
                  selector: '{level="error"}'
                  action: keep
          request_duration_seconds:
            type: Histogram
            description: "Request duration in seconds"
            config:
              value: duration
              buckets: [0.01, 0.05, 0.1, 0.5, 1.0, 2.0, 5.0, 10.0]
      - output:
          source: message